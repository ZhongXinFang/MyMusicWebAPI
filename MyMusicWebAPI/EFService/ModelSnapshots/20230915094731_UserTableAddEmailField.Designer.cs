// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMusicWebAPI.EFService;

#nullable disable

namespace MyMusicWebAPI.EFService.ModelSnapshots
{
    [DbContext(typeof(DBContext))]
    [Migration("20230915094731_UserTableAddEmailField")]
    partial class UserTableAddEmailField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyMusicWebAPI.EFService.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryofbirthCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dateofbirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NationalityCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryofbirthCountryId");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("NationalityCountryId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("Artist", "dbo", t =>
                        {
                            t.HasComment("艺术家信息表");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Countrycode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Countrydescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("Country", "dbo", t =>
                        {
                            t.HasComment("国家字典");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Languagedescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("Language", "dbo", t =>
                        {
                            t.HasComment("语言字典");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Lyric", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LyricistUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LyricistUserId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("Lyric", "dbo", t =>
                        {
                            t.HasComment("歌词表");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Audiofilesjson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Backgroundimgjson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ComposerArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coverimgjson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LyricistArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Publicationdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ComposerArtistId");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("LyricistArtistId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("Song", "dbo", t =>
                        {
                            t.HasComment("歌曲信息表");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Createtime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("Revision")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdatebyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatebyUserId");

                    b.HasIndex("UpdatebyUserId");

                    b.ToTable("User", "dbo", t =>
                        {
                            t.HasComment("用户表");
                        });
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Artist", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.Country", "CountryofbirthCountry")
                        .WithMany()
                        .HasForeignKey("CountryofbirthCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.Country", "NationalityCountry")
                        .WithMany()
                        .HasForeignKey("NationalityCountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CountryofbirthCountry");

                    b.Navigation("CreatebyUser");

                    b.Navigation("NationalityCountry");

                    b.Navigation("UpdatebyUser");
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Country", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatebyUser");

                    b.Navigation("UpdatebyUser");
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Language", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatebyUser");

                    b.Navigation("UpdatebyUser");
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Lyric", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "LyricistUser")
                        .WithMany()
                        .HasForeignKey("LyricistUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatebyUser");

                    b.Navigation("Language");

                    b.Navigation("LyricistUser");

                    b.Navigation("UpdatebyUser");
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.Song", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.Artist", "ComposerArtist")
                        .WithMany()
                        .HasForeignKey("ComposerArtistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.Artist", "LyricistArtist")
                        .WithMany()
                        .HasForeignKey("LyricistArtistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("ComposerArtist");

                    b.Navigation("CreatebyUser");

                    b.Navigation("LyricistArtist");

                    b.Navigation("UpdatebyUser");
                });

            modelBuilder.Entity("MyMusicWebAPI.EFService.User", b =>
                {
                    b.HasOne("MyMusicWebAPI.EFService.User", "CreatebyUser")
                        .WithMany()
                        .HasForeignKey("CreatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyMusicWebAPI.EFService.User", "UpdatebyUser")
                        .WithMany()
                        .HasForeignKey("UpdatebyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatebyUser");

                    b.Navigation("UpdatebyUser");
                });
#pragma warning restore 612, 618
        }
    }
}
